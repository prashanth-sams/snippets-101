[
  {
    "number": 50,
    "tool": "CYPRESS",
    "tip": "set cookies",
    "codex": "Cypress.Cookies.preserveOnce('SESSION')     // remember cookies for this session:<br/>cy.setCookie('logged_in_cookie_name', '000000000000000000000') // hard coded session cookie<br/>cy.setCookie('security_salt_etc', '000000000000000000000') // its like a revokable password but more secure<br/>"
  },
  {
    "number": 49,
    "tool": "CYPRESS",
    "tip": "plugins index",
    "codex": "https://on.cypress.io/plugins-guide"
  },
  {
    "number": 48,
    "tool": "CYPRESS",
    "tip": "open dev tools",
    "codex": "launchOptions.args.push('--auto-open-devtools-for-tabs')"
  },
  {
    "number": 47,
    "tool": "CYPRESS",
    "tip": "headless browser",
    "codex": "--browser chrome --headless<br/>--browser firefox --headless<br/>--browser electron --headless<br/>--browser chrome:canary --headless<br/>--browser chromium --headless<br/>--browser edge --headless"
  },
  {
    "number": 46,
    "tool": "CYPRESS",
    "tip": "load chrome extensions",
    "codex": "--disable-extensions-except=/path/to/extension/<br/>--load-extension=/path/to/extension/"
  },
  {
    "number": 45,
    "tool": "CYPRESS",
    "tip": "cypress installation",
    "codex": "npm install cypress --save-dev<br/>npm i cypress-multi-reporters --save-dev"
  },
  {
    "number": 44,
    "tool": "CYPRESS",
    "tip": "assertions in cypress",
    "codex": "// text not exist<br/>cy.contains('Prashanth').should('not.exist')<br/><br/>// text contains<br/>cy.title().should('include', title);<br/>cy.title().should('eq', title);<br/><br/>// element exist or not?<br/>cy.get('.check-box-sub-text').should('exist');<br/>cy.get('.check-box-sub-text').should('not.exist');<br/><br/>// assert element text<br/>cy.get('h1.a-spacing-small').should('include.text', 'Sign-In')"
  },
  {
    "number": 43,
    "tool": "JENKINS",
    "tip": "allow concurrent builds in a pipeline project",
    "codex": "pipeline {<br/>  options {<br/>      throttleJobProperty(<br/>          throttleEnabled: true,<br/>          throttleOption: 'category',<br/>      )<br/>  }<br/>}"
  },
  {
    "number": 42,
    "tool": "MAC",
    "tip": "check website health with port",
    "codex": "nc -zv google.com 80"
  },
  {
    "number": 41,
    "tool": "MAC",
    "tip": "check if the website is alive",
    "codex": "brew install fping<br/>fping google.com"
  },
  {
    "number": 40,
    "tool": "MAC",
    "tip": "list all the device udid",
    "codex": "xcrun xctrace list devices<br/>instruments -s devices"
  },
  {
    "number": 39,
    "tool": "POSTMAN",
    "tip": "set environment",
    "codex": "pm.environment.set(&quot;envName&quot;, pm.environment.name);<br/>console.log(environment['envName']);"
  },
  {
    "number": 38,
    "tool": "POSTMAN",
    "tip": "validate body contains",
    "codex": "pm.response.to.have.body(&quot;whole response body&quot;);<br/>pm.expect(pm.response.text()).to.include(&quot;part of response body&quot;);"
  },
  {
    "number": 37,
    "tool": "POSTMAN",
    "tip": "fetch environment variable in test",
    "codex": "pm.expect(jsonData.user).have.property('username', environment[&quot;username&quot;]);<br/>pm.expect(jsonData.user).have.property('username', environment.username);<br/>pm.expect(jsonData.user).have.property('username', pm.environment.get('username'));"
  },
  {
    "number": 36,
    "tool": "POSTMAN",
    "tip": "validate value length",
    "codex": "pm.expect(jsonData.user.username).to.have.lengthOf(7)"
  },
  {
    "number": 35,
    "tool": "POSTMAN",
    "tip": "validate part of json object",
    "codex": "user_details = {<br/>    &quot;username&quot;: &quot;admin&quot;,<br/>    &quot;first_name&quot;: &quot;Prashanth&quot;,<br/>    &quot;last_name&quot;: &quot;Sams&quot;,<br/>    &quot;email&quot;: &quot;ab@test.com&quot;,<br/>    &quot;phone&quot;: &quot;+919600945651&quot;<br/>};<br/><br/>pm.expect(jsonData.user).to.deep.include(user_details);"
  },
  {
    "number": 34,
    "tool": "POSTMAN",
    "tip": "validate value datatype",
    "codex": "console.log(typeof pm.response.json().user);<br/><br/>pm.expect(jsonData.user.username).to.be.a(&quot;string&quot;);<br/>pm.expect(jsonData.user.username).to.be.a(&quot;number&quot;);<br/>pm.expect(jsonData.user).to.be.an(&quot;array&quot;);<br/>pm.expect(jsonData.user).to.be.an(&quot;object&quot;);<br/>pm.expect(jsonData.user).to.be.undefined;<br/>pm.expect(jsonData.user).to.be.null;"
  },
  {
    "number": 33,
    "tool": "POSTMAN",
    "tip": "find array with a unique value",
    "codex": "const val = jsonData.user.roles.find(m =&gt; m.id === 59);<br/>console.log(val);"
  },
  {
    "number": 32,
    "tool": "POSTMAN",
    "tip": "validate array",
    "codex": "pm.expect(jsonData.user.roles[0]).to.be.empty;<br/>pm.expect(jsonData.user.roles[0]).to.not.be.empty;<br/><br/>pm.expect(jsonData.user.names).to.have.members([&quot;Prashanth&quot;, &quot;Sunil&quot;]);"
  },
  {
    "number": 31,
    "tool": "POSTMAN",
    "tip": "validate field and it's value",
    "codex": "const jsonData = pm.response.json();<br/>const jsonData = JSON.parse(responseBody);<br/><br/>pm.expect(jsonData.user.username).to.eql(&quot;admin&quot;);<br/>pm.expect(jsonData.user.username).is.to.equal(&quot;admin&quot;);<br/><br/>pm.expect(jsonData.user.roles[0].name).to.include('Sales Manager')<br/>pm.expect(jsonData.user.roles[0].name).to.be.oneOf(['Sales Manager', 'asdasdasd']);<br/><br/>pm.expect(jsonData.user).have.property('username', 'admin');<br/>pm.expect(jsonData.user).have.property('username');<br/>pm.expect(jsonData.user).to.have.property('username');<br/><br/>pm.expect(jsonData.user.roles[0]).to.have.any.keys('id', 'name');<br/>pm.expect(jsonData.user.roles[0]).to.not.have.any.keys('id', 'name');<br/>pm.expect(jsonData.user.roles[0]).to.have.all.keys('id', 'name');<br/><br/>pm.expect(jsonData.user.roles[0]).to.be.an('object').that.has.all.keys('id', 'name');"
  },
  {
    "number": 30,
    "tool": "POSTMAN",
    "tip": "validate cookie availability",
    "codex": "pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;<br/>pm.expect(pm.cookies.get('JSESSIONID')).to.eql('xyz');"
  },
  {
    "number": 29,
    "tool": "POSTMAN",
    "tip": "validate response time",
    "codex": "pm.expect(pm.response.responseTime).to.be.below(2000);"
  },
  {
    "number": 28,
    "tool": "POSTMAN",
    "tip": "validate headers",
    "codex": "pm.response.to.have.header(&quot;Content-Type&quot;);<br/>pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=UTF-8');"
  },
  {
    "number": 27,
    "tool": "POSTMAN",
    "tip": "validate status",
    "codex": "pm.response.to.have.status(200);<br/>pm.expect(pm.response.code).to.be.oneOf([200,201]);<br/>pm.response.to.have.status(&quot;OK&quot;);"
  },
  {
    "number": 26,
    "tool": "PYTHON",
    "tip": "get values using regex in python",
    "codex": "import re<br/>re.findall(&quot;j_id\\d+:j_id\\d+&quot;,res.text)"
  },
  {
    "number": 25,
    "tool": "MAVEN",
    "tip": "ignore the Java Enforcer issues while compilation",
    "codex": "mvn clean install -Denforcer.skip=true"
  },
  {
    "number": 24,
    "tool": "MAC",
    "tip": "check SSL certificate exist?",
    "codex": "keytool -list -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home/jre/lib/security/cacerts<br/><br/>-Djavax.net.ssl.trustStore=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home/jre/lib/security/cacerts&quot; <br/>-Djavax.net.ssl.trustStorePassword=&quot;changeit&quot;"
  },
  {
    "number": 23,
    "tool": "MAC",
    "tip": "add SSL certificate in cacert",
    "codex": "keytool -import -file &quot;/Users/prashanth.rajappa/Desktop/xyz.com.cer&quot; -keystore &quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home/jre/lib/security/cacerts&quot; -alias &quot;meshgateway_CA_certificate&quot;<br/><br/>password: changeit"
  },
  {
    "number": 22,
    "tool": "MAC",
    "tip": "hide and unhide files and folders in mac",
    "codex": "CMD+SHIFT+."
  },
  {
    "number": 21,
    "tool": "CHROME",
    "tip": "open chrome with new profile and cors disabled",
    "codex": "open -na Google\\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security --disable-site-isolation-trials<br/>"
  },
  {
    "number": 20,
    "tool": "SQL",
    "tip": "stop & start mysql in mac",
    "codex": "mysql.server stop<br/>mysqladmin -uroot shutdown<br/><br/>mysql.server start<br/>mysql -uroot"
  },
  {
    "number": 19,
    "tool": "PYTHON",
    "tip": "read directory or file from the current location",
    "codex": "Root_Dir=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br/>print(Root_Dir)<br/>sys.path.append(Root_Dir)<br/><br/>data_folder=os.path.join(Root_Dir,&quot;data&quot;)<br/>file_path=os.path.join(data_folder,&quot;credential_csv_newtour.csv&quot;)<br/>"
  },
  {
    "number": 18,
    "tool": "JAVASCRIPT",
    "tip": "command to run in browser console to check if <code>_ngZone</code> properties are false",
    "codex": "getAllAngularTestabilities()"
  },
  {
    "number": 17,
    "tool": "SQL",
    "tip": "import sqldump with tables one by one",
    "codex": "for SQL in ./testing/*.sql; mysql -h 127.0.0.1 -u root -P 3366 databasename -pc8JQ5J4a &lt; $SQL;<br/>"
  },
  {
    "number": 16,
    "tool": "SQL",
    "tip": "import sqldump",
    "codex": "mysql -h 127.0.0.1 -u root -P 3366 databasename -pc8JMQ5J4a &lt; ~/Documents/databasename.sql<br/>"
  },
  {
    "number": 15,
    "tool": "SQL",
    "tip": "sqldump all tables one by one from a database",
    "codex": "for T in `mysql --skip-column-names -h 127.0.0.1 -u root -P 3366 -e 'show tables from databasename' -pc8JjJ4a`; do echo $T; mysqldump -u root -h 127.0.0.1 -P 3366 databasename $T -pc8JjQ5J4a --set-gtid-purged=OFF --column-statistics=0 &gt; $T.sql; done;<br/>for T in `mysql -h 127.0.0.1 -u root -P 3366 -e 'show tables from databasename' -pc8JjAQ5J4a`; if [[ $T != *Table* ]]; then mysqldump -u root -h 127.0.0.1 -P 3366 databasename $T -pc8JjMQ5J4a --set-gtid-purged=OFF --column-statistics=0 &gt; $T.sql; else continue; fi;"
  },
  {
    "number": 14,
    "tool": "SQL",
    "tip": "list out all the tables of a database",
    "codex": "for T in `mysql -h 127.0.0.1 -u root -P 3366 -e 'show tables from databasename' -pc8JjQ5J4a`; do echo $T; done;<br/>"
  },
  {
    "number": 13,
    "tool": "SQL",
    "tip": "zip sqldump of a database",
    "codex": "mysqldump -u root -h 127.0.0.1 -P 3366 databasename -pc8JjAjI5J4a --set-gtid-purged=OFF --column-statistics=0 | gzip -c &gt; databasename.dump.gz<br/>"
  },
  {
    "number": 12,
    "tool": "SQL",
    "tip": "sqldump of a database",
    "codex": "mysqldump -h 127.0.0.1 -u root -P 3366 -pc8JjAQ5J4a databasename --set-gtid-purged=OFF --column-statistics=0 &gt; databasename.sql<br/>"
  },
  {
    "number": 11,
    "tool": "SHELL",
    "tip": "command line SSH tunnel",
    "codex": "ssh -v -N -i ~/Documents/bastion-host2.pem ec2-user@54.194.36.65 -L 3366:test-db.env-qa.org:3306<br/>"
  },
  {
    "number": 10,
    "tool": "JAVASCRIPT",
    "tip": "loops and await",
    "codex": "let branches = [&quot;Abu Dhabi&quot;, &quot;Al Ain&quot;, &quot;Dubai&quot;, &quot;Fujairah&quot;, &quot;Ras al-Khaimah&quot;, &quot;Sharjah&quot;, &quot;Ajman&quot;];<br/><br/>for (const branch of branches) {<br/>    console.log(branch);<br/>    await ...;<br/>}"
  },
  {
    "number": 9,
    "tool": "SHELL",
    "tip": "execute shell cmds using javascript",
    "codex": "const { exec } = require(&quot;child_process&quot;);<br/><br/>desc('Runner Task');<br/>task('run', function (environment, country) {<br/>  exec(&quot;ls -la&quot;, (error, stdout, stderr) =&gt; {<br/>    if (error) {<br/>        console.log(`error: ${error.message}`);<br/>        return;<br/>    }<br/>    if (stderr) {<br/>        console.log(`stderr: ${stderr}`);<br/>        return;<br/>    }<br/>    console.log(`stdout: ${stdout}`);<br/>  });<br/>});"
  },
  {
    "number": 8,
    "tool": "MAVEN",
    "tip": "default .m2 settings.xml",
    "codex": "&#x3C;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br/>&lt; settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;<br/>          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br/>          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0<br/>                          http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;<br/>    &lt; mirrors&gt;<br/>    &lt; mirror&gt;<br/>        &lt; id&gt;central&lt; /id&gt;<br/>        &lt; name&gt;central&lt; /name&gt;<br/>        &lt; url&gt;https://repo1.maven.org/maven2/&lt; /url&gt;<br/>        &lt; mirrorOf&gt;maven_central&lt; /mirrorOf&gt;<br/>    &lt; /mirror&gt;<br/>    &lt; /mirrors&gt;<br/>&lt; /settings&gt;"
  },
  {
    "number": 7,
    "tool": "AMAZONLINUX",
    "tip": "access Docker commands in Amazon Linux2 ec2-user",
    "codex": "sudo usermod -a -G docker ec2-user\nsudo chmod 666 /var/run/docker.sock\ndocker version"
  },
  {
    "number": 6,
    "tool": "AMAZONLINUX",
    "tip": "install & start Docker in Amazon Linux2",
    "codex": "sudo yum update -y\nsudo yum -y install docker\n\nsudo service docker start"
  },
  {
    "number": 5,
    "tool": "NETWORK",
    "tip": "print ip address using javascript",
    "codex": "import { exec } from 'child_process';\n\nexec('curl ipinfo.io/ip', (err, stdout, stderr) => {\n    logger('ip address of the executor', stdout);\n});"
  },
  {
    "number": 4,
    "tool": "FIREBASE",
    "tip": "initialize firebase",
    "codex": "const firebase = require(&quot;firebase&quot;);\nrequire(&quot;firebase/firestore&quot;);"
  },
  {
    "number": 3,
    "tool": "FIREBASE",
    "tip": "install & deploy firebase",
    "codex": "npm install -g firebase-tools\nfirebase login\nfirebase init\nfirebase deploy"
  },
  {
    "number": 2,
    "tool": "GITHUB",
    "tip": "how to use github secret on github actions",
    "codex": "- name: Install Dependencies\n      run: |\n        npm config set //npm.fontawesome.com/:_authToken=${ACCOUNT_ID}\n        npm ci\n      env:\n        ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}"
  },
  {
    "number": 1,
    "tool": "GIT",
    "tip": "git empty commit & push",
    "codex": "git commit --allow-empty -m &quot;Trigger rebuild&quot;\ngit push"
  } 
]